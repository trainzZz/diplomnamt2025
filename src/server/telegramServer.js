const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const config = require('./config');
const path = require('path');

// Firebase Admin SDK
const admin = require('firebase-admin');
const { getFirestore } = require('firebase-admin/firestore');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
try {
  if (admin.apps.length === 0) {
    admin.initializeApp({
      credential: admin.credential.cert({
        type: "service_account",
        project_id: process.env.FIREBASE_PROJECT_ID,
        private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
        private_key: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
        client_email: process.env.FIREBASE_CLIENT_EMAIL,
        client_id: process.env.FIREBASE_CLIENT_ID,
        auth_uri: "https://accounts.google.com/o/oauth2/auth",
        token_uri: "https://oauth2.googleapis.com/token",
        auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
        client_x509_cert_url: process.env.FIREBASE_CLIENT_CERT_URL
      })
    });
  }
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK:", error);
  process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ Firebase —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞
}

const db = getFirestore();

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let bot;
const initializeBot = () => {
  try {
    bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, { 
      polling: {
        interval: 300,
        autoStart: true,
        params: {
          timeout: 10
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ polling:', error.message);
      if (error.message.includes('409 Conflict')) {
        console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        setTimeout(() => {
          bot.stopPolling();
          initializeBot();
        }, 5000);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    bot.on('webhook_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ webhook:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
    });

    console.log('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    setTimeout(initializeBot, 5000);
  }
};

initializeBot();

// Middleware
app.use(cors());
app.use(express.json());

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'build'
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ telegramServer.js –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src/server,
// –∞ –ø–∞–ø–∫–∞ build - –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, —Ç.–µ. –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ, –ø–æ—Ç–æ–º –≤ build
app.use(express.static(path.join(__dirname, '../../build')));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
const verificationCodes = new Map();

// API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
app.post('/api/generate-code', (req, res) => {
    const { userId } = req.body;
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    verificationCodes.set(code, { userId, timestamp: Date.now(), verified: false });
    console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥:', code, '–¥–ª—è userId:', userId);
    setTimeout(() => {
        if (verificationCodes.has(code) && !verificationCodes.get(code).verified) {
            verificationCodes.delete(code);
            console.log('–ö–æ–¥', code, '–∏—Å—Ç–µ–∫ –∏ —É–¥–∞–ª–µ–Ω (–Ω–µ –±—ã–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)');
        }
    }, 5 * 60 * 1000);
    res.json({ code });
});

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
app.post('/api/verify-code', (req, res) => {
    const { code } = req.body;
    const verification = verificationCodes.get(code);
    if (!verification) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
    }
    if (verification.verified) {
        verificationCodes.delete(code);
        return res.json({
            verified: true,
            userId: verification.userId,
            telegramUserId: verification.telegramUserId
        });
    } else if (Date.now() - verification.timestamp > 5 * 60 * 1000){
        verificationCodes.delete(code);
        return res.status(400).json({ error: '–ö–æ–¥ –∏—Å—Ç–µ–∫' });
    } else {
        return res.json({ verified: false });
    }
});

// Fallback –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö GET-–∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã React Router –º–æ–≥ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../../build', 'index.html'));
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserPackages = async (userId) => {
  try {
    const packagesSnapshot = await db.collection('packages')
      .where('userId', '==', userId)
      .get();
    
    return packagesSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—ã–ª–∫–∏
const formatPackageCard = (package) => {
  return `
üì¶ –ü–æ—Å—ã–ª–∫–∞ #${package.trackingNumber}

üöö –°—Ç–∞—Ç—É—Å: ${formatStatus(package.status)}
${package.description ? `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${package.description}` : ''}
${package.weight ? `\n‚öñÔ∏è –í–µ—Å: ${package.weight} –∫–≥` : ''}
${package.dimensions ? `üìè –†–∞–∑–º–µ—Ä—ã: ${package.dimensions}` : ''}
  `.trim();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const formatUserProfile = (userData) => {
  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
  let regDate = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  if (userData.createdAt) {
    try {
      // Firestore Timestamp –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –º–µ—Ç–æ–¥–æ–º toDate
      if (typeof userData.createdAt === 'object' && userData.createdAt.toDate) {
        regDate = userData.createdAt.toDate().toLocaleDateString('ru-RU');
      } else if (typeof userData.createdAt === 'string' || typeof userData.createdAt === 'number') {
        regDate = new Date(userData.createdAt).toLocaleDateString('ru-RU');
      }
    } catch (e) {
      regDate = '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
  }
  return `
üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç

üßë –§–ò–û: ${userData.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Email: ${userData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè† –ê–¥—Ä–µ—Å: ${userData.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${regDate}
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫: ${userData.packagesCount || 0}
  `.trim();
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        const usersSnapshot = await db.collection('users')
            .where('telegramUserId', '==', chatId)
            .get();

        if (usersSnapshot.empty) {
            bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ.');
            return;
        }

        const keyboard = {
            reply_markup: {
                keyboard: [
                    [{ text: 'üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏' }, { text: 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' }]
                ],
                resize_keyboard: true
            }
        };
        bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userPackageViews = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();
    
    if (!text) return;

    if (text === 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç') {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const usersSnapshot = await db.collection('users')
                .where('telegramUserId', '==', chatId)
                .get();

            if (usersSnapshot.empty) {
                bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ.');
                return;
            }

            const userData = usersSnapshot.docs[0].data();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const packagesSnapshot = await db.collection('packages')
                .where('userId', '==', usersSnapshot.docs[0].id)
                .get();
            
            userData.packagesCount = packagesSnapshot.size;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏', callback_data: 'show_packages' }
                        ]
                    ]
                }
            };

            await bot.sendMessage(chatId, formatUserProfile(userData), keyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
        }
    } else if (text === 'üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏') {
        try {
            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegramUserId
            const usersSnapshot = await db.collection('users')
                .where('telegramUserId', '==', chatId)
                .get();

            if (usersSnapshot.empty) {
                bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ.');
                return;
            }

            const userId = usersSnapshot.docs[0].id;
            const packages = await getUserPackages(userId);

            if (packages.length === 0) {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫.');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            userPackageViews.set(chatId, {
                packages,
                currentIndex: 0
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Å—ã–ª–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await sendPackageWithNavigation(chatId, 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—ã–ª–æ–∫.');
        }
    } else if (text === '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è' || text === '–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è') {
        const view = userPackageViews.get(chatId);
        if (!view) {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ "–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏"');
            return;
        }

        const newIndex = text === '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è' 
            ? (view.currentIndex - 1 + view.packages.length) % view.packages.length
            : (view.currentIndex + 1) % view.packages.length;

        view.currentIndex = newIndex;
        await sendPackageWithNavigation(chatId, newIndex);
    } else if (!text.startsWith('/') && /^\d{6}$/.test(text)) {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
        if (verificationCodes.has(text)) {
            const verification = verificationCodes.get(text);
            if (Date.now() - verification.timestamp > 5 * 60 * 1000) {
                bot.sendMessage(chatId, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ.');
                verificationCodes.delete(text);
            } else {
                verification.verified = true;
                verification.telegramUserId = chatId;
                bot.sendMessage(chatId, '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
                
                // –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—ã–ª–∫–∏
                try {
                    const userId = verification.userId;
                    const packages = await getUserPackages(userId);

                    if (packages.length === 0) {
                        bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫.');
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ—Å—ã–ª–æ–∫
                        const keyboard = {
                            reply_markup: {
                                keyboard: [
                                    [{ text: 'üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏' }, { text: 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' }]
                                ],
                                resize_keyboard: true
                            }
                        };
                        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
                        return;
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
                    userPackageViews.set(chatId, {
                        packages,
                        currentIndex: 0
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Å—ã–ª–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    await sendPackageWithNavigation(chatId, 0);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ—Å—ã–ª–æ–∫
                    const keyboard = {
                        reply_markup: {
                            keyboard: [
                                [{ text: 'üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏' }, { text: 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' }]
                            ],
                            resize_keyboard: true
                        }
                    };
                    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞:', error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—ã–ª–æ–∫.');
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    const keyboard = {
                        reply_markup: {
                            keyboard: [
                                [{ text: 'üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏' }, { text: 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' }]
                            ],
                            resize_keyboard: true
                        }
                    };
                    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
                }
            }
        } else {
            bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ.');
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async function sendPackageWithNavigation(chatId, index, messageId = null) {
    const view = userPackageViews.get(chatId);
    if (!view || !view.packages || view.packages.length === 0) {
        if (messageId) {
            await bot.editMessageText('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫.', {
                chat_id: chatId,
                message_id: messageId
            });
        } else {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫.');
        }
        userPackageViews.delete(chatId);
        return;
    }

    const package = view.packages[index];
    const notificationsEnabled = package.telegramNotifications && package.telegramNotifications.enabled;
    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: 'prev' },
                    { text: `${index + 1}/${view.packages.length}`, callback_data: 'count' },
                    { text: '–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data: 'next' }
                ],
                [
                    { text: notificationsEnabled ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: `toggle_notifications:${package.id}` },
                ],
                [
                    { text: 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'show_profile' }
                ]
            ]
        }
    };

    try {
        if (messageId) {
            await bot.editMessageText(formatPackageCard(package), {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard.reply_markup
            });
        } else {
            const sentMessage = await bot.sendMessage(chatId, formatPackageCard(package), keyboard);
            view.messageId = sentMessage.message_id;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        if (!messageId) {
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const view = userPackageViews.get(chatId);
    
    if (callbackQuery.data === 'show_packages') {
        try {
            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegramUserId
            const usersSnapshot = await db.collection('users')
                .where('telegramUserId', '==', chatId)
                .get();

            if (usersSnapshot.empty) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç',
                    show_alert: true
                });
                return;
            }

            const userId = usersSnapshot.docs[0].id;
            const packages = await getUserPackages(userId);

            if (packages.length === 0) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫',
                    show_alert: true
                });
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            userPackageViews.set(chatId, {
                packages,
                currentIndex: 0
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Å—ã–ª–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await sendPackageWithNavigation(chatId, 0);
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—ã–ª–æ–∫',
                show_alert: true
            });
            return;
        }
    }
    
    if (callbackQuery.data === 'show_profile') {
        try {
            const usersSnapshot = await db.collection('users')
                .where('telegramUserId', '==', chatId)
                .get();
            if (usersSnapshot.empty) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç',
                    show_alert: true
                });
                return;
            }
            const userData = usersSnapshot.docs[0].data();
            const packagesSnapshot = await db.collection('packages')
                .where('userId', '==', usersSnapshot.docs[0].id)
                .get();
            userData.packagesCount = packagesSnapshot.size;
            await bot.sendMessage(chatId, formatUserProfile(userData));
            await bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
                show_alert: true
            });
        }
        return;
    }
    
    if (!view || !view.packages || view.packages.length === 0) {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–°–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.',
            show_alert: true
        });
        return;
    }

    let newIndex = view.currentIndex;
    
    if (callbackQuery.data.startsWith('toggle_notifications:')) {
        const packageId = callbackQuery.data.split(':')[1];
        const package = view.packages[view.currentIndex];
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ telegramNotifications.enabled
        const currentEnabled = package.telegramNotifications && package.telegramNotifications.enabled;
        const newEnabled = !currentEnabled;
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º telegramNotifications.enabled –≤ Firestore
            await db.collection('packages').doc(packageId).update({
                'telegramNotifications.enabled': newEnabled
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (!package.telegramNotifications) package.telegramNotifications = {};
            package.telegramNotifications.enabled = newEnabled;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await sendPackageWithNavigation(chatId, view.currentIndex, messageId);
            
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: newEnabled ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                show_alert: true
            });
        }
        return;
    }
    
    switch (callbackQuery.data) {
        case 'prev':
            newIndex = (view.currentIndex - 1 + view.packages.length) % view.packages.length;
            break;
        case 'next':
            newIndex = (view.currentIndex + 1) % view.packages.length;
            break;
        case 'count':
            // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º
            break;
    }

    view.currentIndex = newIndex;
    await sendPackageWithNavigation(chatId, newIndex, messageId);
    await bot.answerCallbackQuery(callbackQuery.id);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const formatStatus = (status) => {
  if (!status) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  switch (status.toLowerCase()) {
    case 'created': return '–°–æ–∑–¥–∞–Ω–∞';
    case 'in_transit': return '–í –ø—É—Ç–∏';
    case 'ready': return '–ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
    case 'pending': return '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞';
    case 'registered': return '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞';
    case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞';
    case 'returned': return '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞';
    default: return status;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏
const sendPackageStatusNotification = async (packageId, newStatus) => {
  try {
    const packageRef = db.collection('packages').doc(packageId);
    const packageDocSnap = await packageRef.get();
    
    if (!packageDocSnap.exists) {
      console.error('–ü–æ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', packageId);
      return;
    }

    const packageData = packageDocSnap.data();
    
    const userRef = db.collection('users').doc(packageData.userId);
    const userDocSnap = await userRef.get();
    
    if (!userDocSnap.exists || !userDocSnap.data().telegramConnected) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram:', packageData.userId);
      return;
    }

    const userData = userDocSnap.data();
    const telegramUserId = userData.telegramUserId;

    const statusText = formatStatus(newStatus);
    const message = `
üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏

–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${packageData.trackingNumber}
–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${statusText}
${packageData.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${packageData.description}` : ''}
${packageData.weight ? `–í–µ—Å: ${packageData.weight} –∫–≥` : ''}
${packageData.dimensions ? `–†–∞–∑–º–µ—Ä—ã: ${packageData.dimensions}` : ''}
–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}
    `.trim();

    await bot.sendMessage(telegramUserId, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—á–µ—Ä–µ–∑ Admin SDK):', { packageId, userId: packageData.userId, telegramUserId, status: newStatus });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Admin SDK):', error);
    throw error;
  }
};

// API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
app.post('/api/notify-status-change', async (req, res) => {
  try {
    const { packageId, newStatus } = req.body;
    if (!packageId || !newStatus) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å packageId –∏ newStatus' });
    }
    await sendPackageStatusNotification(packageId, newStatus);
    res.json({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É' });
  } catch (error) {
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      details: error.message 
    });
  }
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(config.SERVER_PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.SERVER_PORT} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Firebase Admin SDK`);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –≥–¥–µ-—Ç–æ –µ—â–µ, —Ö–æ—Ç—è –¥–ª—è telegramServer —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
module.exports = {
  // app, // –û–±—ã—á–Ω–æ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç app —Ü–µ–ª–∏–∫–æ–º
  // sendPackageStatusNotification // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API endpoint
}; 